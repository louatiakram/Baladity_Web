{% extends 'base-front.html.twig' %}

{% block title %}Liste des TÃ¢ches{% endblock %}


{% block body %}

<label class="switch" id="dark-mode-toggle">
    <input type="checkbox" id="dark-mode-checkbox">
    <span class="slider"></span>
</label>


{# Check if there's a flash message #}
{% if flash_message is not empty %}
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        {{ flash_message }}
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>
{% endif %}

<div>
    <a href="{{ path('tache_download_csv') }}" class="btn btn-primary">Export Excel</a>
{# Add a button-like element to trigger file selection #}
<label for="csv-file-input" class="btn btn-primary">Import CSV</label>
<form id="csv-upload-form" action="{{ path('tache_import_csv') }}" method="post" enctype="multipart/form-data" style="display: none;">
    <input type="file" name="csv_file" accept=".csv" id="csv-file-input" onchange="this.form.submit()">
</form>
<div id="chatbot-button" onclick="showChat()">
    <img src="{{ asset('back-office/img/chat-botT.gif') }}" alt="ChatBot" class="rounded-circle" style="width: 100px; height: auto;">
    </div>    

    <div id="chat-container">
        <div id="chat-header" onclick="toggleChat()">Baladity</div>
        <div id="chat-area"></div>
        <input type="text" id="user-input">
        <button class="button" onclick="sendMessage()">Send</button>
        <button class="button" onclick="clearConversation()">Clear Conversation</button>
        <button class="button" onclick="hideChat()">Hide Chat</button>
    </div>
</div>

    <div class="d-flex justify-content-between">
        <div class="flex-fill mr-3">
            <div class="card">
                <div class="card-header">
                    <h2>TODO<span id="todo-counter"
                                  class="task-counter">{{ taches|filter(t => t.etatT == 'TODO')|length }}</span></h2>
                </div>
                <div class="card-body">
                    <div id="TODO" class="grid">
                        {% for tache in taches %}
                            {% if tache.etatT == 'TODO' %}
                                <div class="tache" draggable="true" id="{{ tache.idT }}">
                                    <h6>
                                        {{ tache.titreT }}
                                        <button id="detail-front"
                                                onclick="location.href='{{ path('tache_detail_front', {'i': tache.getIdT()}) }}'"
                                                type="button" class="btn btn-outline-primary"><i
                                                    class="bi bi-info-circle"></i></button>
                                    </h6>
                                </div>
                            {% endif %}
                        {% endfor %}
                    </div>
                </div>
            </div>
        </div>

        <div class="flex-fill mx-3">
            <div class="card">
                <div class="card-header">
                    <h2>DOING<span id="doing-counter"
                                   class="task-counter">{{ taches|filter(t => t.etatT == 'DOING')|length }}</span></h2>
                </div>
                <div class="card-body">
                    <div id="DOING" class="grid">
                        {% for tache in taches %}
                            {% if tache.etatT == 'DOING' %}
                                <div class="tache" draggable="true" id="{{ tache.idT }}">
                                    <h6>
                                        {{ tache.titreT }}
                                        <button id="detail-front"
                                                onclick="location.href='{{ path('tache_detail_front', {'i': tache.getIdT()}) }}'"
                                                type="button" class="btn btn-outline-primary"><i
                                                    class="bi bi-info-circle"></i></button>
                                    </h6>
                                </div>
                            {% endif %}
                        {% endfor %}
                    </div>
                </div>
            </div>
        </div>

        <div class="flex-fill ml-3">
            <div class="card">
                <div class="card-header">
                    <h2>DONE<span id="done-counter"
                                  class="task-counter">{{ taches|filter(t => t.etatT == 'DONE')|length }}</span></h2>
                </div>
                <div class="card-body">
                    <div id="DONE" class="grid">
                        {% for tache in taches %}
                            {% if tache.etatT == 'DONE' %}
                                <div class="tache" draggable="true" id="{{ tache.idT }}">
                                    <h6>
                                        {{ tache.titreT }}
                                        <button id="detail-front"
                                                onclick="location.href='{{ path('tache_detail_front', {'i': tache.getIdT()}) }}'"
                                                type="button" class="btn btn-outline-primary"><i
                                                    class="bi bi-info-circle"></i></button>
                                    </h6>
                                </div>
                            {% endif %}
                        {% endfor %}
                    </div>
                </div>
            </div>
        </div>
    </div>

    <style>
        .grid {
            min-height: 400px;
            max-height: 400px; /* Set maximum height */
            overflow-y: auto;  /* Add vertical scrollbar when content exceeds max-height */
            min-width: 400px
        }

        .tache {
            position: relative;
            margin: 0px 0px 25px 0px;
            padding: 10px;
            border-radius: 5px;
            border: solid;
            font-size: 14px;
            border-color: red #012545;
        }

        #detail-front {
            margin: 0px 0px 0px 10px;

        }

        .card-header {
            color: #012545;
            margin: 0px 0px 0px 0px;
            position: relative;
            border-radius: 4px;
            border: dashed #012545;

        }

        .task-counter {
            color: #012545;
            position: absolute;
            margin: 0px 0px 0px 25px;
            border-radius: 30px;
            border: solid red;
            font-size: x-small;
            padding: 10px;
        }
        /* Chat Container Styling */
        #chat-container {
            display: none;
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 400px;
            height: 400px;
            border: 1px solid #ccc;
            border-radius: 10px;
            background-color: #f9f9f9;
            box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.5);
            overflow: hidden;
            font-family: Arial, sans-serif;
            z-index: 9999; /* Set a high z-index value */
        }

        /* Chat Header Styling */
        #chat-header {
            background-color: #4285f4;
            color: #fff;
            padding: 10px;
            cursor: pointer;
        }

        /* Chat Area Styling */
        #chat-area {
            height: calc(100% - 150px); /* Changed height calculation */
            overflow-y: auto;
            padding: 10px;
            border-bottom: 1px solid #ccc;
            color: #012545;
        }

        /* Input Field Styling */
        #user-input {
            width: calc(100% - 20px);
            margin: 10px;
            padding: 5px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        /* Button Styling */
        .button {
            width: calc(50% - 15px);
            margin: 5px;
            padding: 10px;
            border: none;
            border-radius: 5px;
            background-color: #4285f4;
            color: #fff;
            cursor: pointer;
        }
        .button:hover {
            background-color: #3c78dc;
        }

        /* ChatBot Button Styling */
        #chatbot-button {
            position: fixed;
            bottom: 20px; /* Change bottom to top */
            right: 20px;
            cursor: pointer;
            z-index: 9999; /* Set a high z-index value */
        }
        #chatbot-button img {
            width: 100px;
            height: auto;
            border-radius: 50%;
            z-index: 10000; /* Set a higher z-index value than the container */
        }

    </style>
    <style>

        /* The switch - the box around the slider */
.switch {
  display: block;
  --width-of-switch: 3.5em;
  --height-of-switch: 2em;
  /* size of sliding icon -- sun and moon */
  --size-of-icon: 1.4em;
  /* it is like a inline-padding of switch */
  --slider-offset: 0.3em;
  position: relative;
  width: var(--width-of-switch);
  height: var(--height-of-switch);
}

/* Hide default HTML checkbox */
.switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

/* The slider */
.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #f4f4f5;
  transition: .4s;
  border-radius: 30px;
}

.slider:before {
  position: absolute;
  content: "";
  height: var(--size-of-icon,1.4em);
  width: var(--size-of-icon,1.4em);
  border-radius: 20px;
  left: var(--slider-offset,0.3em);
  top: 50%;
  transform: translateY(-50%);
  background: linear-gradient(40deg,#ff0080,#ff8c00 70%);
  ;
 transition: .4s;
}

input:checked + .slider {
  background-color: #303136;
}

input:checked + .slider:before {
  left: calc(100% - (var(--size-of-icon,1.4em) + var(--slider-offset,0.3em)));
  background: #303136;
  /* change the value of second inset in box-shadow to change the angle and direction of the moon  */
  box-shadow: inset -3px -2px 5px -2px #8983f7, inset -10px -4px 0 0 #a3dafb;
}
</style>
<style>
    /* Dark Mode Styles */
    .dark-mode {
        /* Background color */
        background-color: #121212;
        color: #ffffff; /* Text color */
    
        /* Card background color */
        .card {
            background-color: #1e1e1e;
            color: #ffffff; /* Card text color */
        }
    
        /* Card header background color */
        .card-header {
            background-color: #2e2e2e;
            color: #ffffff; /* Card header text color */
        }
    
        /* Button background color */
        .btn {
            background-color: #424242;
            color: #ffffff; /* Button text color */
        }
    
        /* Button hover background color */
        .btn:hover {
            background-color: #555555;
        }
    
        /* Input background color */
        input {
            background-color: #333333;
            color: #ffffff; /* Input text color */
        }
    
        /* Slider background color */
        .slider {
            background-color: #555555;
        }
    
        /* Slider before color */
        .slider:before {
            background: linear-gradient(40deg, #ff0080, #ff8c00 70%);
            box-shadow: inset -3px -2px 5px -2px #8983f7, inset -10px -4px 0 0 #a3dafb;
        }
    
        /* Task counter color */
        .task-counter {
            color: #ffffff;
        }
    
        /* Chat container background color */
        #chat-container {
            background-color: #212121;
        }
    
        /* Chat header background color */
        #chat-header {
            background-color: #333333;
            color: #ffffff; /* Chat header text color */
        }
    
        /* Chat area background color */
        #chat-area {
            background-color: #2c2c2c;
            color: #ffffff; /* Chat area text color */
        }
    
        /* Chat input background color */
        #user-input {
            background-color: #333333;
            color: #ffffff; /* Chat input text color */
        }
    
        /* Chat button background color */
        .button {
            background-color: #424242;
            color: #ffffff; /* Chat button text color */
        }
    
        /* Chat bot button background color */
        #chatbot-button {
            background-color: #424242;
        }
    
        /* Chat bot button hover background color */
        #chatbot-button:hover {
            background-color: #555555;
        }
    
        /* Chat bot button image filter */
        #chatbot-button img {
            filter: invert(1);
        }
    
        /* Alert background color */
        .alert {
            background-color: #333333;
            border-color: #555555;
            color: #ffffff; /* Alert text color */
        }
    
        /* Alert close button background color */
        .btn-close {
            filter: invert(1);
        }
    }
    </style>
    <script>
        // Function to toggle dark mode
        function toggleDarkMode() {
            var body = document.body;
            body.classList.toggle('dark-mode');
        }
    
        // Add event listener to the checkbox
        document.getElementById('dark-mode-checkbox').addEventListener('change', function() {
            toggleDarkMode();
        });
    </script>
 <script>
    document.addEventListener("DOMContentLoaded", function() {
        var userInputField = document.getElementById('user-input');
        userInputField.addEventListener("keypress", function(event) {
            if (event.key === "Enter") {
                sendMessage();
            }
        });
    });
        function toggleChat() {
            var chatContainer = document.getElementById('chat-container');
            chatContainer.style.display = chatContainer.style.display === 'none' ? 'block' : 'none';
        }

        function showChat() {
            var chatContainer = document.getElementById('chat-container');
            chatContainer.style.display = 'block';
        }

        function sendMessage() {
            var userInput = document.getElementById('user-input').value;
            var chatArea = document.getElementById('chat-area');

            var formData = new FormData();
            formData.append('user_input', userInput);

            fetch('{{ path('chatbot_process') }}', {
                method: 'POST',
                body: formData
            })
            .then(response => response.text())
            .then(data => {
                chatArea.innerHTML += 'You: ' + userInput + '<br>';
                chatArea.innerHTML += 'ChatBot: ' + data + '<br>';
            });

            // Clear user input field
            document.getElementById('user-input').value = '';
            document.getElementById('user-input').focus();
        }

        function clearConversation() {
            var chatArea = document.getElementById('chat-area');
            chatArea.innerHTML = '';
        }

        function hideChat() {
            var chatContainer = document.getElementById('chat-container');
            chatContainer.style.display = 'none';
        }
    </script>
{% endblock %}
{%block rest%}{% endblock %}